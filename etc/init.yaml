---
members:

  info:

    view: # members/info/view
      map: |-
        function($doc) use ($emit) {
          $emit($doc->_id, [$doc->username, $doc->primaryEmail, $doc->createdAt, $doc->firstName, $doc->lastName, $doc->headline]);
        };
      reduce: _count

  names:

    view: # members/names/view
      map: |-
        function($doc) use ($emit) {
          $emit($doc->_id, [$doc->username, $doc->primaryEmail]);
        };

  newest:

    view: # members/newest/view
      map: |-
        function($doc) use ($emit) {
          $emit($doc->createdAt);
        };

  byUsername:

    view: # members/byUsername/view
      map: |-
        function($doc) use ($emit) {
          $emit($doc->username, $doc->_id);
        };

  byEmail:

    view: # members/byEmail/view
      map: |-
        function($doc) use ($emit) {
          foreach ($doc->emails as $email => $verified)
            $emit($email, $verified);
        };

  byConsumer:

    view: # members/byConsumer/view
      map: |-
        function($doc) use ($emit) {
          foreach ($doc->logins as $loginName => $value)
            $emit($loginName);
        };

  byRole:

    view: # members/byRole/view
      map: |-
        function($doc) use ($emit) {
          foreach ($doc->roles as $name => $class)
            $emit([$name, $doc->createdAt]);
        };

  byTag:

    view: # members/byTag/view
      map: |-
        function($doc) use ($emit) {
          foreach ($doc->tags as $key => $value)
            $emit($key);
        };

  tasks:

    view: # members/tasks/view
      map: |-
        function($doc) use ($emit) {
          if (isset($doc->tasks)) {
            $tasks = $doc->tasks;
            foreach ($tasks as $key => $value)
              $emit($doc->_id, ['docClass' => $doc->class, 'taskClass' => $key]);
          }
        };


followers:

  perMember:

    view: # followers/perMember/view
      map: |-
        function($doc) use ($emit) {
          $emit([$doc->memberId, $doc->followerId]);
        };
      reduce: _count

  following:

    view: # followers/following/view
      map: |-
        function($doc) use ($emit) {
          $emit([$doc->followerId, $doc->memberId]);
        };
      reduce: _count


friendships:

  relations:

    view: # friendships/relations/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->approved) {
            $emit([$doc->approved, $doc->senderId, $doc->receiverId], $doc->approvedAt);
            $emit([$doc->approved, $doc->receiverId, $doc->senderId], $doc->approvedAt);
          }
          else {
            $emit([$doc->approved, $doc->senderId, $doc->receiverId], $doc->requestedAt);
            $emit([$doc->approved, $doc->receiverId, $doc->senderId], $doc->requestedAt);
          }
        };
      reduce: _count


subscriptions:

  perItem:

    view: # subscriptions/perItem/view
      map: |-
        function($doc) use ($emit) {
          $emit([$doc->itemId, $doc->memberId]);
        };


posts:

  info:

    view: # posts/info/view
      map: |-
        function($doc) use ($emit) {
          $emit($doc->_id, [
              'type' => $doc->type,
              'state' => $doc->state,
              'title' => $doc->title,
              'excerpt' => $doc->excerpt,
              'slug' => $doc->slug,
              'createdAt' => $doc->createdAt,
              'modifiedAt' => $doc->modifiedAt,
              'publishedAt' => $doc->publishedAt,
              'creatorId' => $doc->creatorId,
              'tags' => $doc->tags
            ]);
        };
      reduce: _count

  byUnversionId:

    view: # posts/byUnversionId/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->state == 'current')
            $emit($doc->unversionId);
        };
      reduce: _count

  byUrl:

    view: # posts/byUrl/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->state == 'current' or $doc->state == 'deleted')
            $emit([$doc->year, $doc->month, $doc->day, $doc->slug]);
        };

  byLegacyId:

    view: # posts/byLegacyId/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->state == 'current')
            $emit($doc->legacyId);
        };

  perTag:

    view: # posts/perTag/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->state == 'current' && isset($doc->tags))
            foreach ($doc->tags as $key => $value)
              $emit($key);
        };
      reduce: _count

  approvedInfo:

    view: # posts/approvedInfo/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->state == 'approved') {
            $editorId = isset($doc->editorId) ? $doc->editorId : $doc->creatorId;
            $editSummary = isset($doc->editSummary) ? $doc->editSummary : '';

            $emit($doc->unversionId, [
                'modifiedAt' => $doc->modifiedAt,
                'editorId' => $editorId,
                'editSummary' => $editSummary
              ]);
          }
        };

  inElaboration:

    view: # posts/inElaboration/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->state == 'indexing' || $doc->state == 'deleting')
            $emit($doc->unversionId);
        };

  tasks:

    view: # posts/tasks/view
      map: |-
        function($doc) use ($emit) {
          if (isset($doc->tasks)) {
            $tasks = $doc->tasks;
            foreach ($tasks as $key => $value)
              $emit($doc->_id, ['docClass' => $doc->class, 'taskClass' => $key]);
          }
        };


replies:

  perPost:

    view: # replies/perPost/view
      map: |-
        function($doc) use ($emit) {
          $emit($doc->postId);
        };
      reduce: _count

  newestPerPost:

    view: # replies/newestPerPost/view
      map: |-
        function($doc) use ($emit) {
          $emit([$doc->postId, $doc->publishedAt]);
        };

  activePerPost:

    view: # replies/activePerPost/view
      map: |-
        function($doc) use ($emit) {
          $emit([$doc->postId, $doc->modifiedAt]);
        };


tags:

  info:

    view: # tags/info/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->type == 'tag')
            $emit($doc->_id, [$doc->name, $doc->excerpt, $doc->createdAt]);
        };
      reduce: _count

  byUnversionId:

    view: # tags/byUnversionId/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->type == 'tag' && $doc->state == 'current')
            $emit($doc->unversionId);
        };
      reduce: _count

  newest:

    view: # tags/newest/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->type == 'tag' && $doc->state == 'current')
            $emit($doc->createdAt);
        };

  names:

    view: # tags/names/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->type == 'tag' && $doc->state == 'current')
            $emit($doc->unversionId, $doc->name);
        };

  synonymsNames:

    view: # tags/synonymsNames/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->type == 'synonym' && $doc->state == 'current') {
            $emit($doc->_id, $doc->name);
          }
        };

  byName:

    view: # tags/byName/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->type == 'tag' && $doc->state == 'current')
            $emit($doc->name);
        };

  synonymsByName:

    view: # tags/synonymsByName/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->type == 'synonym' && $doc->state == 'current') {
            $emit($doc->name);
          }
        };

  andSynonymsByName:

    view: # tags/andSynonymsByName/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->state == 'current')
            $emit($doc->name);
        };

  synonyms:

    view: # tags/synonyms/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->type == 'tag') {
            $emit($doc->unversionId, $doc->unversionId);

            foreach ($doc->synonyms as $value)
              $emit($value, $doc->unversionId);
          }
        };

  substrings:

    view: # tags/substrings/view
      map: |-
        function($doc) use ($emit) {
          if ($doc->state == 'current') {
            $str = preg_replace('/-/su', '', $doc->name);
            $length = mb_strlen($str, 'UTF-8');

            $subs = [];
            for ($i = 0; $i < $length; $i++)
              for ($j = 1; $j <= $length; $j++)
                $subs[] = mb_substr($str, $i, $j, 'UTF-8');

            $subs = array_unique($subs);

            foreach ($subs as $substring)
              $emit($substring);
          }
        };


votes:

  perItem:

    view: # votes/perItem/view
      map: |-
        function($doc) use ($emit) {
          $emit($doc->itemId, $doc->value);
        };
      reduce: _count

  perItemAndEditingDate:

    view: # votes/perItemAndEditingDate/view
      map: |-
        function($doc) use ($emit) {
          $emit([$doc->itemId, $doc->modifiedAt]);
        };

  perItemAndMember:

    view: # votes/perItemAndMember/view
      map: |-
        function($doc) use ($emit) {
          $emit([$doc->itemId, $doc->voterId], $doc->value);
        };

  perMember:

    view: # votes/perMember/view
      map: |-
        function($doc) use ($emit) {
          $emit($doc->voterId);
        };
      reduce: _count

  members:

    view: # votes/members/view
      map: |-
        function($doc) use ($emit) {
          $emit([$doc->itemId, $doc->timestamp], $doc->voterId);
        };

...